name: Run tests
description: Run tests for a single matrix entry

inputs:
  phpunit:
    type: boolean
    default: false
  phpunit_suite:
    type: string
    required: false
    default: ''
  phpunit_fail_on_warning:
    type: boolean
    default: false
  endtoend:
    type: boolean
    default: false
  endtoend_suite:
    type: string
    required: false
    default: ''
  endtoend_config:
    type: string
    required: false
    default: ''
  endtoend_tags:
    type: string
    required: false
    default: ''
  js:
    type: boolean
    default: false
  phpcoverage:
    type: boolean
    default: false
  phplinting:
    type: boolean
    default: false
  doclinting:
    type: boolean
    default: false

runs:
  using: composite
  env:
    # A list of allowed software licesnses that are permissive
    # See https://spdx.org/licenses/ for a list of SPDX identifiers
    SPDX_ALLOWED_DELIMITED: 'MIT;MIT-0;ISC;0BSD;BSD-2-Clause;BSD-3-Clause;Apache-2.0;Python-2.0;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Public Domain;Unlicense'
  steps:

    - name: Validate inputs
      shell: bash
      env:
        PHPUNIT_SUITE: ${{ inputs.phpunit_suite }}
        ENDTOEND_SUITE: ${{ inputs.endtoend_suite }}
        ENDTOEND_CONFIG: ${{ inputs.endtoend_config }}
        ENDTOEND_TAGS: ${{ inputs.endtoend_tags }}
      run: |
        if ! [[ "$PHPUNIT_SUITE" =~ ^[a-zA-Z0-9_\-]*$ ]]; then
          echo "Invalid input for phpunit_suite"
          exit 1
        fi
        if ! [[ "$ENDTOEND_SUITE" =~ ^[a-zA-Z0-9_\-]*$ ]]; then
          echo "Invalid input for endtoend_suite"
          exit 1
        fi
        if ! [[ "$ENDTOEND_CONFIG" =~ ^[a-zA-Z0-9_\./\-]*$ ]]; then
          echo "Invalid input for endtoend_config"
          exit 1
        fi
        if ! [[ "$ENDTOEND_TAGS" =~ ^[a-zA-Z0-9,]*$ ]]; then
          echo "Invalid input for endtoend_tags"
          exit 1
        fi

    - name: Run PHPUnit
      # input booleans are converted to strings
      if: ${{ inputs.phpunit == 'true' }}
      shell: bash
      env:
        PHPUNIT_SUITE: ${{ inputs.phpunit_suite }}
      run: |
        PHPUNIT_OPTIONS="--colors=always"
        [[ $(vendor/bin/phpunit --version) =~ ([0-9]+)\.([0-9]+)\.([0-9]+) ]]
        MAJOR=${BASH_REMATCH[1]}
        MINOR=${BASH_REMATCH[2]}
        PATCH=${BASH_REMATCH[3]}
        INT_VERSION=$(( $MAJOR * 10000 + $MINOR * 100 + $PATCH ))
        if (( "$INT_VERSION" < 100000 )); then
          # --verbose option removed in PHPUnit 10, as it's now always verbose
          PHPUNIT_OPTIONS="$PHPUNIT_OPTIONS --verbose"
        fi
        # --display-phpunit-deprecations option added in PHPUnit 11.3.3
        # deprecations will display by default in PHPUnit <= 11.3.2
        if (( "$INT_VERSION" >= 110303 )); then
          PHPUNIT_OPTIONS="$PHPUNIT_OPTIONS --display-phpunit-deprecations"
        fi
        if [[ "$PHPUNIT_SUITE" != "all" ]] && [[ "$PHPUNIT_SUITE" != "" ]]; then
          PHPUNIT_OPTIONS="$PHPUNIT_OPTIONS --testsuite "$PHPUNIT_SUITE""
        fi
        if [[ "${{ inputs.phpunit_fail_on_warning }}" == "true" ]]; then
          PHPUNIT_OPTIONS="$PHPUNIT_OPTIONS --fail-on-warning"
        fi
        # --exclude-filter added in PHPUnit 11
        if (( "$INT_VERSION" >= 110300 )); then
          # Special filtering for silverstripe/framework testsuites
          if [[ "$PHPUNIT_SUITE" == "framework-orm" ]]; then
            PHPUNIT_OPTIONS="$PHPUNIT_OPTIONS --filter /ORM/"
          fi
          if [[ "$PHPUNIT_SUITE" == "framework-core" ]]; then
            PHPUNIT_OPTIONS="$PHPUNIT_OPTIONS --exclude-filter /ORM/"
          fi
        fi
        echo "PHPUNIT_OPTIONS is $PHPUNIT_OPTIONS"
        vendor/bin/phpunit $PHPUNIT_OPTIONS
        echo "Passed"

    - name: Setup chrome and chromedriver
      if: ${{ inputs.endtoend == 'true' }}
      shell: bash
      run: |
        echo "Default versions of google-chrome and chromedriver"
        GCVR=$(google-chrome --version)
        CDVR=$(chromedriver --version)
        echo "$GCVR"
        echo "$CDVR"
        # Example version number is 101.0.4951.64
        [[ "$GCVR" =~ ([0-9]+\.[0-9]+\.[0-9]+)\.[0-9]+ ]]
        GCV="${BASH_REMATCH[1]}"
        [[ "$CDVR" =~ ([0-9]+\.[0-9]+\.[0-9]+)\.[0-9]+ ]]
        CDV="${BASH_REMATCH[1]}"
        # Reinstall if a.b.c versions do not match, though allow a different .d version
        if [[ "$GCV" != "$CDV" ]]; then
          WGC=$(which google-chrome)
          echo "google-chrome and chromedriver versions do not match, reinstalling"
          sudo apt remove -y --purge google-chrome-stable
          # Note that on ubuntu 20.04 and later, these will be installed via a snap. When trying to install
          # chromium (or any other snaps), we get a permission error, but it doesn't seem to cause problem. The error looks like this:
          # mkdir: cannot create directory '/run/user/1001': Permission denied
          sudo apt install -y chromium-browser chromium-chromedriver
          echo "Updated versions of chromium-browser and chromedriver"
          sudo ln -s $(which chromium-browser) "$WGC"
          google-chrome --version
          chromedriver --version
        else
          echo "Default versions match, continuing"
        fi

    - name: Run end-to-end tests
      if: ${{ inputs.endtoend == 'true' }}
      shell: bash
      env:
        ENDTOEND_SUITE: ${{ inputs.endtoend_suite }}
        ENDTOEND_CONFIG: ${{ inputs.endtoend_config }}
        ENDTOEND_TAGS: ${{ inputs.endtoend_tags }}
      run: |
        echo "Running behat"
        BEHAT_CONFIG="behat.yml"
        if [[ "$ENDTOEND_CONFIG" != "" ]]; then
          BEHAT_CONFIG="$ENDTOEND_CONFIG"
        fi
        if ! [[ -f "$BEHAT_CONFIG" ]]; then
          echo "$BEHAT_CONFIG config file missing"
          exit 1
        fi
        # Remove any sneaky attempts to put __behat* files into pull-requests
        if [[ -f __behat.yml ]]; then
          rm __behat.yml
        fi
        if [[ -f __behat.php ]]; then
          rm __behat.php
        fi
        if [[ -f __behat_headless.yml ]]; then
          rm __behat_headless.yml
        fi
        # Copy files from the action to temporary locations to generate the new headless behat config
        cp "$BEHAT_CONFIG" __behat.yml
        cp ${{ github.action_path }}/behat.php __behat.php
        cp ${{ github.action_path }}/behat_headless.yml __behat_headless.yml
        php __behat.php
        rm __behat.php
        rm __behat_headless.yml
        # start chromedriver as a background process
        nohup sh -c "chromedriver" > /dev/null 2>&1 &
        if [[ "$ENDTOEND_SUITE" != "root" ]]; then
          if [[ $ENDTOEND_TAGS != "" ]]; then
            vendor/bin/behat --colors --strict --config __behat.yml "$ENDTOEND_SUITE" --tags="$ENDTOEND_TAGS"
          else
            vendor/bin/behat --colors --strict --config __behat.yml "$ENDTOEND_SUITE"
          fi
        else
          if [[ $ENDTOEND_TAGS != "" ]]; then
            vendor/bin/behat --colors --strict --config __behat.yml --tags="$ENDTOEND_TAGS"
          else
            vendor/bin/behat --colors --strict --config __behat.yml
          fi
        fi
        echo "Passed"

    - name: Run JS tests
      if: ${{ inputs.js == 'true' }}
      shell: bash
      run: |
        echo "Running JS tests"
        if [[ ! -f package.json ]]; then
          echo "package.json missing"
          exit 1
        fi
        if [[ ! -f .nvmrc ]]; then
          echo "Missing .nvmrc"
          exit 1
        fi
        # Set nvmdir explicitly before installation. Default dir doesn't work for some reason.
        export NVM_DIR="${HOME}/.nvm"
        # Installation fails if install dir is specified but doesn't exist
        if ! [[ -d "$NVM_DIR" ]]; then
          echo "NVM_DIR '$NVM_DIR' doesn't exist - creating it now"
          mkdir $NVM_DIR
        fi
        # Remove any sneaky attempts to put __install-nvm.sh into pull-requests
        if [[ -f __install-nvm.sh ]]; then
          rm __install-nvm.sh
        fi
        # Install nvm
        cp ${{ github.action_path }}/install-nvm.sh __install-nvm.sh
        chmod +x __install-nvm.sh
        ./__install-nvm.sh
        if [[ $? != 0 ]]; then
          echo "Error while installing nvm"
          exit 1
        fi
        # this loads nvm into the current terminal
        [[ -s "$NVM_DIR/nvm.sh" ]] && \. "$NVM_DIR/nvm.sh" --no-use
        ADMIN_NPM_VERSION=
        if [[ -d vendor/silverstripe/admin ]]; then
          cd vendor/silverstripe/admin
          nvm install
          nvm use
          ADMIN_NPM_VERSION=$(npm -v)
          npm install -g yarn
          yarn install --network-concurrency 1
          cd ../../..
        fi
        nvm install
        nvm use
        if [[ $(npm -v) != $ADMIN_NPM_VERSION ]]; then
          npm install -g yarn;
        fi
        yarn install --network-concurrency 1
        if [[ $(cat package.json | jq -r '.scripts.build') != 'null' ]]; then
          DIST_DIR=
          if [[ -d client/dist ]]; then
            DIST_DIR=client/dist
          elif [[ -d dist ]]; then
            DIST_DIR=dist
          else
            echo "No dist directory found"
            exit 1
          fi
          echo "Deleting $DIST_DIR"
          rm -rf $DIST_DIR
          echo "Running yarn build"
          yarn run build
          echo "Running git diff"
          # Add all files to ensure that any new files previously uncommitted are tracked
          git add $DIST_DIR
          GIT_DIFF=$(git diff --cached --name-status --relative=$DIST_DIR)
          if [[ $GIT_DIFF != "" ]]; then
            echo "git diff found modified files when it should not have:"
            echo $GIT_DIFF
            echo "sha1sum of files that are different:"
            for FILEPATH in $(git diff --cached --name-only); do
              if [[ -f $FILEPATH ]]; then
                sha1sum $FILEPATH
              fi
            done
            exit 1
          fi
        fi
        if [[ $(cat package.json | jq -r '.scripts.test') != 'null' ]]; then
          echo "Running yarn test"
          yarn run test
        fi
        if [[ $(cat package.json | jq -r '.scripts.lint') != 'null' ]]; then
          echo "Running yarn lint"
          yarn run lint
        fi
        # Validate licenses of all dependencies are permissive
        echo "Checking licenses of all dependencies"
        npm install -g license-checker
        license-checker --production --unknown --out /dev/null --onlyAllow "$SPDX_ALLOWED_DELIMITED"
        # If we get to this point, everything was successful
        echo "Passed"

    - name: "Run PHP linting"
      if: ${{ inputs.phplinting == 'true' }}
      shell: bash
      run: |
        if [[ -f vendor/bin/parallel-lint ]]; then
          echo "Running parallel-lint"
          vendor/bin/parallel-lint --exclude vendor --exclude .git .
        fi
        echo "Running PHPCS"
        if ! [[ -f phpcs.xml ]] && ! [[ -f phpcs.xml.dist ]]; then
          echo "Missing phpcs.xml or phpcs.xml.dist"
          exit 1
        fi
        vendor/bin/phpcs
        # phpstan is optional
        if [[ -f phpstan.neon.dist ]]; then
          echo "Running PHPStan"
          vendor/bin/phpstan analyse
        fi
        # Validate licenses of all dependencies are permissive
        echo "Checking licenses of all dependencies"
        composer global require madewithlove/license-checker-php
        COMPOSER_GLOBAL_HOME=$(composer -q -n config --global home)
        SPDX_ALLOWED_LIST=$(echo $SPDX_ALLOWED_DELIMITED | tr " " "__" | tr ";" "\n")
        SPDX_USED_LIST=$($COMPOSER_GLOBAL_HOME/vendor/bin/license-checker --no-dev used)
        for SPDX_USED in $SPDX_USED_LIST; do
          IS_ALLOWED=0
          for SPDX_ALLOWED in $SPDX_ALLOWED_LIST; do
            SPDX_ALLOWED=$(echo $SPDX_ALLOWED | tr "__" " ")
            if [[ $SPDX_USED == $SPDX_ALLOWED ]]; then
              IS_ALLOWED=1
              break
            fi
          done
          if [[ $IS_ALLOWED == 0 ]]; then
            echo "License $SPDX_USED found in composer dependecies is not allowed"
            exit 1
          fi
        done
        # If we get to this point, everything was successful
        echo "Passed"

    - name: "Run PHP coverage"
      if: ${{ inputs.phpcoverage == 'true' }}
      shell: bash
      run: |
        echo "Running codecov"
        curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --import
        curl -Os https://uploader.codecov.io/latest/codecov-linux
        curl -Os https://uploader.codecov.io/latest/codecov-linux.SHA256SUM
        curl -Os https://uploader.codecov.io/latest/codecov-linux.SHA256SUM.sig
        gpg --verify codecov-linux.SHA256SUM.sig codecov-linux.SHA256SUM
        shasum -a 256 -c codecov-linux.SHA256SUM
        chmod +x codecov-linux
        phpdbg -qrr vendor/bin/phpunit --coverage-clover=coverage.xml
        ./codecov-linux -f coverage.xml;
        echo "coverage.xml generated and uploaded to codecov"

    - name: "Run documentation linting"
      if: ${{ inputs.doclinting == 'true' }}
      shell: bash
      run: |
        echo "Running documentation linting"
        if [[ ! -f vendor/silverstripe/documentation-lint/.nvmrc ]]; then
          echo "File vendor/silverstripe/documentation-lint/.nvmrc is missing. Check dependencies."
          exit 1
        fi
        # Remove any sneaky attempts to put __install-nvm.sh into pull-requests
        if [[ -f __install-nvm.sh ]]; then
          rm __install-nvm.sh
        fi
        # Install nvm
        cp ${{ github.action_path }}/install-nvm.sh __install-nvm.sh
        chmod +x __install-nvm.sh
        ./__install-nvm.sh
        if [[ $? != 0 ]]; then
          echo "Error while installing nvm"
          exit 1
        fi
        export NVM_DIR="$HOME/.nvm"
        # this loads nvm into the current terminal
        [[ -s "$NVM_DIR/nvm.sh" ]] && \. "$NVM_DIR/nvm.sh"
        # Swap to correct version and make sure yarn is installed
        NPM_VERSION=$(cat vendor/silverstripe/documentation-lint/.nvmrc)
        nvm install $NPM_VERSION && nvm use $NPM_VERSION
        npm install --global yarn
        # Run the linting script
        vendor/bin/doclint
        echo "Passed"

    - name: Delete temporary files
      shell: bash
      if: always()
      run: |
        if [[ -f __install-nvm.sh ]]; then
          rm __install-nvm.sh
        fi
